package problem_solving_6;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class Duplicates_binary {

    public static void main(String[] args) {

        int[][] A={
                {1,0,0,0,1,1,0,1,1,0,0,1,0,0,1,0,1,0,1,1,0,0,1,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0},
                {1,1,0,1,0,0,1,1,1,0,1,1,1,0,0,1,1,0,1,1,0,1,0,0,0,1,0,1,1,1,1,1,0,1,0,1,1,0},
                {0,0,0,0,0,1,1,0,0,1,1,1,1,0,0,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,0,1,0,1,0,0},
                {1,1,0,1,0,0,1,1,1,0,1,1,1,0,0,1,1,0,1,1,0,1,0,0,0,1,0,1,1,1,1,1,0,1,0,1,1,0},
                {0,1,0,0,0,1,0,0,1,0,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,1,1,0,1,1,1,0,0,1,1,0,0},
                {1,1,1,1,1,1,0,0,0,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,0,1,0,1,1,0,1,0,1,1,1,0,0,0},
                {1,1,0,1,0,0,1,1,1,0,1,1,1,0,0,1,1,0,1,1,0,1,0,0,0,1,0,1,1,1,1,1,0,1,0,1,1,0},
                {0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,0,0,0,1,0,1,1,0,1,0,1,1,1,0,1,1,1,1,0,1,1,1,1},
                {0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,0,1,0,0,1,0},
                {1,1,0,0,0,1,0,0,1,0,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,1,0,1,1,1,0,0},
                {0,1,1,0,0,1,1,1,0,1,0,0,0,0,0,0,1,1,1,0,0,1,0,1,0,0,0,0,1,0,0,1,1,0,1,1,0,1},
                {1,0,1,0,0,1,0,0,1,1,0,0,0,1,0,1,0,0,1,0,0,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,0,1},
                {0,0,0,1,1,1,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,1,1,1,0,1,1,1,1,0,1,0,0},
                {0,1,0,1,1,0,0,1,0,0,1,0,0,1,0,1,1,0,1,1,1,0,0,1,1,0,0,0,0,0,1,0,1,1,1,0,1,1},
                {0,1,1,1,1,0,0,0,1,1,1,0,1,0,0,0,1,0,0,1,1,0,1,1,0,1,0,0,0,0,0,1,1,0,1,0,0,0},
                {0,0,0,0,0,0,1,1,0,1,0,0,0,1,0,1,0,0,0,0,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,1,0,0},
                {1,0,0,1,0,0,0,0,0,0,1,1,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,0,0,0,0,0,1,1,1,0,1},
                {1,1,1,1,1,1,0,1,1,1,0,0,0,0,1,0,1,1,1,1,0,1,0,1,0,1,1,0,0,0,0,0,1,1,1,1,0,0},
                {0,1,1,0,0,0,1,0,0,0,1,0,1,1,1,1,1,0,1,0,0,0,1,0,0,1,0,1,1,1,0,1,1,0,1,1,0,1},
                {0,0,1,0,0,1,1,0,1,0,0,1,1,1,1,0,0,1,1,1,1,1,0,1,0,0,0,1,0,0,0,0,0,1,1,1,1,1},
                {0,0,1,0,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,0,1,0,1,0,1,0,0,0,1,0,0,1,1,0,1,0,0,1},
                {1,1,1,1,1,1,0,1,1,1,0,0,0,0,1,0,1,1,1,1,0,1,0,1,0,1,1,0,0,0,0,0,1,1,1,1,0,0},
                {1,0,1,0,1,1,0,1,1,0,1,1,1,1,1,1,0,1,0,0,1,0,0,0,1,1,0,1,0,1,1,1,1,1,1,0,0,0},
                {1,1,0,1,0,0,1,1,1,0,1,1,1,0,0,1,1,0,1,1,0,1,0,0,0,1,0,1,1,1,1,1,0,1,0,1,1,0},
                {0,1,1,0,0,0,1,0,0,0,1,0,1,1,1,1,1,0,1,0,0,0,1,0,0,1,0,1,1,1,0,1,1,0,1,1,0,1},
                {0,0,1,1,1,0,0,1,1,0,1,1,0,0,0,0,0,0,1,0,0,1,1,1,1,0,1,1,0,1,1,1,0,1,1,0,1,0},
                {0,1,1,1,1,0,0,0,1,1,1,0,1,0,0,0,1,0,0,1,1,0,1,1,0,1,0,0,0,0,0,1,1,0,1,0,0,0},
                {1,1,0,0,0,1,0,0,1,0,1,1,1,1,0,0,1,0,1,0,0,1,0,1,1,1,1,1,0,0,1,0,1,0,0,0,1,0},
                {0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,1,1,1,0,1,0,1,0,1,1,1,1,0,0,1,0,1,0,0},
                {1,0,1,0,1,0,0,0,0,1,0,1,0,1,1,0,1,0,1,0,1,0,0,1,1,1,1,0,1,1,0,1,0,1,0,1,1,1},
                {0,0,1,0,0,1,0,1,0,0,1,0,1,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,1,0,1,0,1},
                {1,1,0,0,1,1,1,1,0,1,0,1,0,0,0,1,1,0,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,0,0,1,0},
                {0,0,1,0,0,1,1,0,1,0,0,1,1,1,1,0,0,1,1,1,1,1,0,1,0,0,0,1,0,0,0,0,0,1,1,1,1,1},
                {1,1,0,1,0,0,1,1,1,0,1,1,1,0,0,1,1,0,1,1,0,1,0,0,0,1,0,1,1,1,1,1,0,1,0,1,1,0},
                {1,0,1,0,0,1,0,0,1,1,0,0,0,1,0,1,0,0,1,0,0,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,0,1},
                {0,0,1,0,1,0,0,1,1,0,0,0,0,0,1,1,0,1,0,1,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1},
                {1,0,0,1,1,1,1,1,1,0,1,1,0,0,0,1,0,1,0,1,0,0,0,0,0,0,1,0,1,0,1,0,1,0,0,0,0,1},
                {1,1,0,0,0,1,0,0,1,0,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,1,0,1,1,1,0,0},
                {1,1,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,1,0,1,0,1,0,0,0,1,1,0,1},
                {1,0,1,0,0,1,0,1,0,1,1,1,1,1,0,1,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,1,0,1,0,0,1,1},
                {0,1,1,0,0,0,1,0,0,0,1,0,1,1,1,1,1,0,1,0,0,0,1,0,0,1,0,1,1,1,0,1,1,0,1,1,0,1},
                {0,0,0,1,1,0,1,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,1,0,1,0,0,1,1,0,1,1,1,1,1,0,1,0},
                {0,1,1,0,0,0,1,0,0,0,1,0,1,1,1,1,1,0,1,0,0,0,1,0,0,1,0,1,1,1,0,1,1,0,1,1,0,1},
                {1,1,0,0,0,1,0,0,1,0,1,1,1,1,0,0,1,0,1,0,0,1,0,1,1,1,1,1,0,0,1,0,1,0,0,0,1,0},
                {0,0,0,0,0,1,1,0,0,1,1,1,1,0,0,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,0,1,0,1,0,0},
                {0,1,1,0,1,0,1,1,1,0,0,1,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,0,1,1,1,0,0,0,0,1,1,1},
                {0,0,1,0,1,0,1,0,0,1,1,0,1,1,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0},
        };


        solve_1(A);
    }

    public static void solve_1(int[][] A) {

        String b="";
        for(int i=0;i<A.length;i++){
            String a="";
            for (int j = 0; j < A[0].length; j++) {
                a=a+A[i][j];
            }
            b=b+a+"_";
        }
        String[] sp =  b.split("_");

        String sum ="";
        for (int i = 0; i < sp.length; i++) {
            for (int j = i+1; j < sp.length; j++) {
                if(sp[i].equals(sp[j])){
                    sum=sum+j+"_";
                    System.out.println(i+"_"+j);
                    System.out.println(sp[i]+" "+sp[j]);
                }
            }
        }
        String[] sump =  sum.split("_");
        int[] result = new int[sump.length];
        for (int i = 0; i < sump.length; i++) {
            result[i]=Integer.parseInt(sump[i])+1;
            System.out.print(result[i]+" ");
        }

        removeDup(result);


    }

    public static void removeDup(int[] A){
        HashMap<Integer,Integer> map  = new HashMap<>();
        for (int i = 0; i < A.length; i++) {
            if(map.containsKey(A[i])){
                map.put(A[i],map.get(A[i])+1);
            }else{
                map.put(A[i],1);
            }
        }
        int[] result = new int[map.size()];
        int i=0;
        for (Map.Entry<Integer,Integer> entry: map.entrySet()) {
            result[i]=entry.getKey();
            i++;
        }

    }


    public static void solve(int[][] A) {
        String a="";
        for(int i=0;i<A.length-1;i++){
            boolean flag =false;
            int val=0;
            for(int j=0;j<A[0].length;j++){
                if(A[i][j] ==A[i+1][j] ){
                    flag =true;
                    val=j;
                }else{
                    flag=false;
                    break;
                }
            }
            if(flag){
                a=a+val+"_";
            }
        }

        System.out.println(a);
        String[] sp =  a.split("_");
        System.out.println(sp.length);
        int[] result = new int[sp.length];
        for(int i=0;i<sp.length;i++){
            result[i]=(Integer.parseInt(sp[i])+1);
            System.out.println(result[i]);
        }

    }
}
